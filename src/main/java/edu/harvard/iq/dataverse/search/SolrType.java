package edu.harvard.iq.dataverse.search;

import java.util.HashMap;
import java.util.Optional;

/**
 * This class depicts actual <fieldType> entries in schema.xml.
 *
 * Note: It is not necessary to have a precise XML representation of all fields possible for now.
 *       Instead, we will only use aspects that are important to us, so we can use it for validation.
 *       Down the road, it might be interesting to define and configure some <fieldType> completely
 *       via Managed Schema API.
 */
public enum SolrType {
        /**
     * @todo: make this configurable from text_en to text_general or
     * non-English languages? We changed it to text_en to improve English
     * language searching in https://github.com/IQSS/dataverse/issues/444
     * <p>
     * We want to get away from always using "text_en" (especially to
     * support range queries) in
     * https://github.com/IQSS/dataverse/issues/370
     */
    STRING("string", "solr.StrField"),
    TEXT_EN("text_en", "solr.TextField"),
    TEXT_GENERAL("text_general", "solr.TextField", true),
    TEXT_GENERAL_REV("text_general_rev", "solr.TextField"),
    ALPHAONLYSORT("alphaOnlySort", "solr.TextField"),
    INTEGER("pint", "solr.IntPointField"),
    LONG("plong", "solr.LongPointField"),
    FLOAT("pfloat", "solr.FloatPointField"),
    DOUBLE("pdouble", "solr.DoublePointField"),
    DATE("pdate", "solr.DatePointField"),
    BOOLEAN("boolean", "solr.BoolField"),
    // Some field are generated by Solr for responses etc. To still maintain a list of those,
    // this type marks a field as Solr generated.
    INTERNAL(null, null);
    
    private final String typeName;
    private final String typeClass;
    private final Optional<Boolean> multiValued;
    
    private final static HashMap<String, SolrType> lookup = new HashMap<>();
    static {
        for (SolrType st : SolrType.values()) {
            lookup.put(st.typeName(), st);
        }
    }
    
    SolrType(String typeName, String typeClass) {
        this.typeName = typeName;
        this.typeClass = typeClass;
        this.multiValued = Optional.empty();
    }
    
    SolrType(String typeName, String typeClass, Boolean multiValued) {
        this.typeName = typeName;
        this.typeClass = typeClass;
        this.multiValued = Optional.ofNullable(multiValued);
    }
    
    public String typeName() {
        return typeName;
    }
    public String typeClass() {
        return typeClass;
    }
    public boolean isMultiValued() {
        return multiValued.orElse(false);
    }
    
    public SolrType getByTypeName(String typeName) {
        return lookup.get(typeName);
    }
}
